var TableDatatablesEditable = function() {
	var rCopy = '';
	var oCopy = false;
	var editValues = [];
	var e = function() {
		function e(e, t) {
			/*
			 * for (var n = t.innerText.split('\t'), a = $(">td", t), l = 0, r =
			 * a.length; l < r; l++) e.fnUpdate(n[l], t, l, !1); e.fnDraw()
			 */
		}

		function t(e, t) {
			rCopy = t;
			console.log(t, l, "t");
			if(angular.element('.mainCtrl').scope().editCount != false){
				$("td:contains('Cancel')").closest("tr").remove();
		    }  
			
			 var n1 = t.innerText.split('\t');
			// console.log(n1, "n1");
			 n1.reverse();
		//	 console.log(n1);
			 var  data1 = new Array;
			 for(i=0;i<6;i++){
				 if(n1[i] == undefined)
					 {
					 n1[i] = "";
					 console.log(n1[i],"if");
					 data1.push(n1[i]);
				 }
				 else{
				 data1.push(n1[i]);
				
				 }
			 }
			 data1.reverse();
			 editValues =data1;		
			 // console.log(data1,"reverse1");
			
			   var n;
			   if(data1.includes("Edit")){
				if(data1.length == 6){
					 n = data1;
				}else{
					var row = data1
					var diff = 6 - row.length
					var arrangedValues = [];
					var value = 0;
					for(var num = 5; num > 0; num--)
						{
						console.log(row.length, row);
						if((row.length-1) >=0){
						arrangedValues[num] = row[value];
						console.log(arrangedValues[num] , row[value], (row.length-1));
						value++;}
						}
			//		console.log(arrangedValues, "arr", row);
				}
			    }else{
			    n = e.fnGetData(t); 
			   }
			   a = $(">td", t);
			  
			   t.innerText.split('\t');
            //  console.log(n);
			a[0].innerHTML = '<input type="text" class="form-control input-small" value="' + ((n[0]!= null) ? (n[0]) : "") + '">',
			a[1].innerHTML = '<input type="text" class="form-control input-small" value="' + ((n[1]!= null) ? (n[1]) : "") + '">',
			a[2].innerHTML = '<input type="text" class="form-control input-small" value="' + ((n[2]!= null) ? (n[2]) : "") + '">',
			a[3].innerHTML = '<input type="text" class="form-control input-small" value="' + ((n[3]!= null) ? (n[3]) : "") + '">',
			a[4].innerHTML = '<a class="edit" href="">Save</a>', a[5].innerHTML = '<a class="cancel" href="">Cancel</a>'

			// Remove additional rows when we click on Add New+ button
		  	$("td:contains('Delet')").closest("tr").remove();
			
			
		}
		
		function kk(e, t) {
		   // $("td:contains('Cancel')").closest("tr").remove();
			var n = $("input", t);
			console.log(n, "kk");
			var arr = [];
			for (index = 0; index < n.length; index++){
				arr[index] = n[index].value;
				console.log(arr[index],"arrid");
			}
		// angular.element('.mainCtrl').scope().saveCount = true;
			console.log(angular.element('.mainCtrl').scope().saveCount,"saveCount",  angular.element('.mainCtrl').scope().editDelegateId);
			
		       angular.element('.mainCtrl').scope().editDelegateId != '' ?
			($("td:contains('Delet')").closest("tr").remove(),editValues = [],
			angular.element('.mainCtrl').scope().updateDelegateList(arr)):
			(e.fnUpdate(n[0].value, t, 0, !1), e.fnUpdate(n[1].value, t, 1, !1),
			e.fnUpdate(n[2].value, t, 2, !1), e.fnUpdate(n[3].value, t, 3, !1),
			e.fnUpdate('<a class="edit" href="">Edit</a>', t, 4, !1),
			e.fnUpdate('<a class="delete" href="">Delet</a>', t, 5, !1), e.fnDraw(),
			$("td:contains('Delet')").closest("tr").remove(),
			$("td:contains('Cancel')").closest("tr").remove(),
			angular.element('.mainCtrl').scope().saveDelegateList(arr));
			 
			// Remove additional rows when we click on Add New+ button
			
			
		}
		function kkSecond(e, t) {
			    // $("td:contains('Cancel')").closest("tr").remove();
			    if(angular.element('.mainCtrl').scope().editCount != false){
			    	console.log(angular.element('.mainCtrl').scope().editCount, $(".deleListValue tr:last"));
			    	//angular.element('.mainCtrl').scope().saveCount = false;
			    	//angular.element('.mainCtrl').scope().fetchDelegateList();
			    }  
			    else{	
				console.log(e, "kksecond", t);
				var n = $("input", t);
				console.log(n, "kkSecond");
				var arr = [];
				for (index = 0; index < n.length; index++){
					arr[index] = n[index].value;
				}
				angular.element('.mainCtrl').scope().saveCount = false;
				angular.element('.mainCtrl').scope().editCount = false;
				e.fnUpdate(n[0].value, t, 0, !1), e.fnUpdate(n[1].value, t, 1, !1),
				e.fnUpdate(n[2].value, t, 2, !1), e.fnUpdate(n[3].value, t, 3, !1),
				e.fnUpdate('<a class="edit" href="">Edit</a>', t, 4, !1),
				e.fnUpdate('<a class="delete" href="">Delet</a>', t, 5, !1), e.fnDraw();
				// Remove additional rows when we click on Add New+ button
				console.log($("td:contains('Delet')").closest("tr"));
				$("td:contains('Delet')").closest("tr").remove();
				}
			}
		var a = $("#sample_editable_1"),
			l = a.dataTable({
				lengthMenu : [
					[ 5, 15, 20, -1 ],
					[ 5, 15, 20, "All" ]
				],
				"paging" : false,
				"info" : false,
				searching : false,
				pageLength : 5,
				language : {
					lengthMenu : " _MENU_ records"
				},
				columnDefs : [ {
					orderable : false,
					targets : [ 0,1,2,3,4, 5 ]
				}, {
					searchable : !0,
					targets : [ 0 ]
				} ],
				/*
				 * order : [ [ 5, "asc" ] ]
				 */
			}),
			r = ($("#sample_editable_1_wrapper"), null),
			o = !1;
		$("#sample_editable_1_new").click(function(e) {
                        
		   angular.element('.mainCtrl').scope().fetchDelegateList();
		   angular.element('.mainCtrl').scope().cancelSelect = true;
		   oCopy = o;
		   ((angular.element('.mainCtrl').scope().editCount != false || angular.element('.mainCtrl').scope().editDelegateId != '') ? (r=rCopy , o = true) : rCopy = null)
		    console.log(angular.element('.mainCtrl').scope().saveCount, e.preventDefault(), o ,i, r, rCopy, "addNew");
			if (e.preventDefault(), o && r) {
				console.log(angular.element('.mainCtrl').scope().saveCount, e.preventDefault(), o , r, "addNew1");
				angular.element('.mainCtrl').scope().saveCount != true ? 
					(kk(l,r),$("td:contains('Cancel')").closest("tr").remove()) :
					    kkSecond(l, r), r = null
			}
			// console.log(a);
			var a = l.fnAddData([ "", "", "", "", "", "" ]),
				i = l.fnGetNodes(a[0]);
			// console.log(i, l),
			$(".deleListValue").find("tr").last().remove();
			t(l, i), r = i, o = !0
			console.log(r, o, "ro");
		}),$("#sample_editable_paste_data").click(function(e) {
			var button = window.getSelection().toString().split("\t");
			console.log(button);
			if(button != ""){var arr = [];
			for (index = 0; index < button.length; index++){
				arr[index] = button[index];
			}
			angular.element('.mainCtrl').scope().saveDelegateList(arr);}
			
		})
		, a.on("click", ".delete", function(e) {
			angular.element('.mainCtrl').scope().cancelSelect = true;
			angular.element('.mainCtrl').scope().deleteDelegateList();

		}), a.on("click", ".cancel", function(t) {
			t.preventDefault(),
			console.log("cancel", editValues,editValues[0], (editValues[0] == ("")));
			 angular.element('.mainCtrl').scope().saveCount = true;
			 angular.element('.mainCtrl').scope().cancelSelect = false;
			 
			// $("td:contains('Cancel')").closest("tr").remove();
			 if((editValues[0] != "" && editValues[0] != undefined)|| (editValues[1] != "" && editValues[1] != undefined)
					 || (editValues[2] != "" && editValues[2] != undefined)
					 || (editValues[3] != "" && editValues[3] != undefined)){
			  console.log(editValues, "if");
			  angular.element('.mainCtrl').scope().updateDelegateList(editValues);
			  }
			 else{
				 console.log(editValues, "else");
				 $("td:contains('Cancel')").closest("tr").remove();
			  }
			 
			 
			// $("td:contains('Delet')").closest("tr").remove();
			// angular.element('.mainCtrl').scope().fetchDelegateList();
			/* o ? (l.fnDeleteRow(r), r = null, o = !1) : (e(l, r), r = null) */
		}),a.on("click",".edit",function(a){
			angular.element('.mainCtrl').scope().cancelSelect = true;
			a.preventDefault(),o=!1;
			var i=$(this).parents("tr")[0];
			console.log(i, "i");
			null!==r&&r!=i?(e(l,r),t(l,i),r=i)
					:r==i&&"Save"==this.innerHTML?(kk(l,r),r=null,
							$(".deleListValue").find("tr").last().remove()):
								(t(l,i), r=i)})};
	return {
		init : function() {
			e()
		},
		clear: function() {
			//console.log(bookingList);
		    	var dataTable = $("#sample_editable_1").DataTable();
		    	dataTable.clear();
		    	
		        console.log(dataTable);
		    	//e();
			}
	}
}();
/* jQuery(document).ready(function(){TableDatatablesEditable.init()}); */